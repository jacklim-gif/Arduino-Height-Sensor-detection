#define trigPin 2
#define echoPin 3
#define ledPin 13    // LED pin
#define buzzerPin 8  // Active buzzer pin

long duration;
int distance;

// Distance thresholds (in cm)
const int LED_DISTANCE = 100;
const int BUZZER_DISTANCE = 90;

void setup() {
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(ledPin, OUTPUT);
  pinMode(buzzerPin, OUTPUT);
  Serial.begin(9600);
  // Wait for sensor stabilization
  delay(1000);
  Serial.println("Ultrasonic Sensor, LED, and Buzzer Initialized");
}

int getDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration_local = pulseIn(echoPin, HIGH, 30000); // Timeout after 30ms (~5m)
  int distance = duration_local == 0 ? -1 : (duration_local * 0.034 / 2); // Handle timeout
  return distance;
}

void loop() {
  // Measure distance
  distance = getDistance();

  // Print distance
  Serial.print("Distance: ");
  if (distance == -1) {
    Serial.println("Error");
  } else {
    Serial.print(distance);
    Serial.println(" cm");
  }

  // LED control: on if distance <= 100 cm and valid
  if (distance <= LED_DISTANCE && distance != -1) {
    digitalWrite(ledPin, HIGH);
  } else {
    digitalWrite(ledPin, LOW);
  }

  // Buzzer control: on if distance <= 90 cm and valid
  if (distance <= BUZZER_DISTANCE && distance != -1) {
    digitalWrite(buzzerPin, LOW); // Turn on active buzzer
  } else {
    digitalWrite(buzzerPin, HIGH);  // Turn off active buzzer
  }

  delay(200); // Delay to prevent echo interference
}
